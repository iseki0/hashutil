package space.iseki.hashutil

import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.descriptors.serialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import java.util.HexFormat
import java.io.File
import java.io.InputStream
import java.lang.invoke.MethodHandles
import java.nio.ByteOrder
import java.nio.file.OpenOption
import java.nio.file.Path
import java.security.MessageDigest
import kotlin.io.path.inputStream

private val INT_ARR_HANDLE = MethodHandles.byteArrayViewVarHandle(IntArray::class.java, ByteOrder.nativeOrder())!!

private fun putIntOffset(bytes: ByteArray, off: Int, value: Int){
    INT_ARR_HANDLE.set(bytes, off, value)
}

private fun getIntOffset(bytes: ByteArray, off: Int) = INT_ARR_HANDLE.get(bytes, off) as Int

private val hex = HexFormat.of()

private fun MessageDigest.hashStream(inputStream: InputStream): ByteArray {
    val buffer = ByteArray(4 * 1024)
    var read: Int
    while (inputStream.read(buffer).also { read = it } > -1) {
        update(buffer, 0, read)
    }
    return digest()
}

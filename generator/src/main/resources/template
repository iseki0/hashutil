private const val %lenConst% = %len%

@Suppress("SameParameterValue", "unused", "DuplicatedCode", "MemberVisibilityCanBePrivate")
@Serializable(%name%.Serializer::class)
class %name% private constructor(
%decl%
) {
    constructor(input: ByteArray) : this(
        input,
        0
    )

    internal constructor(input: ByteArray, off: Int) : this(
        getIntOffset(input, off),
%constructor1%
    )

    constructor(input: String) : this(hex.parseHex(input))

    private fun copyInto(arr: ByteArray, off: Int) {
        putIntOffset(arr, off, i0)
%copyInto%
    }

    fun bytes(): ByteArray = ByteArray(%lenConst%).also { copyInto(it, 0) }

    override fun toString(): String = hex.formatHex(bytes())

    object Serializer : KSerializer<%name%> {
        override val descriptor: SerialDescriptor
            get() = serialDescriptor<String>()

        override fun deserialize(decoder: Decoder) = decoder.decodeString().let(::%name%)

        override fun serialize(encoder: Encoder, value: %name%) {
            encoder.encodeString(value.toString())
        }

    }
}

private fun get%name%() = MessageDigest.getInstance("%alg%")!!

fun InputStream.%name%(): %name% = get%name%().hashStream(this).let(::%name%)

fun File.%name%() = inputStream().use { it.%name%() }

fun Path.%name%(vararg openOption: OpenOption) = inputStream(*openOption).use { it.%name%() }
